{"context":{"init_table":[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0]],"state":"finish","turns":{"1":2,"2":1}},"input_type":"Number","preserve_context":true,"first":{"Node":{"id":"input","executor":{"ContextMut":[]},"destination":[{"next":{"Node":"init game"},"condition":{"Eq":{"from_1":{"ParsedInput":{"path":"/","required":false}},"from_2":{"Static":0}}}},{"next":{"Node":"pick player"},"condition":{"And":{"comp_1":{"Eq":{"from_1":{"Context":{"path":"state","required":false}},"from_2":{"Static":"pick_player"}}},"comp_2":{"Or":{"comp_1":{"Eq":{"from_1":{"ParsedInput":{"path":"/","required":false}},"from_2":{"Static":1}}},"comp_2":{"Eq":{"from_1":{"ParsedInput":{"path":"/","required":false}},"from_2":{"Static":2}}}}}}}},{"next":{"Node":"player move"},"condition":{"And":{"comp_1":{"Eq":{"from_1":{"Context":{"path":"state","required":false}},"from_2":{"Static":"running"}}},"comp_2":{"And":{"comp_1":{"Gt":{"from_1":{"ParsedInput":{"path":"/","required":false}},"from_2":{"Static":0}}},"comp_2":{"Lt":{"from_1":{"ParsedInput":{"path":"/","required":false}},"from_2":{"Static":8}}}}}}}},{"next":{"ExitErr":[{"from":{"Input":{}},"prefix":"Invalid input:\n"}]},"condition":"True"}]}},"nodes":[{"Node":{"id":"init game","executor":{"ContextMut":[{"from":{"Static":"pick_player"},"to":{"path":"state","merge":"Insert","optional":false}},{"from":{"Context":{"path":"init_table","required":false}},"to":{"path":"table","ty":"Array","merge":"Insert","optional":false}}]},"destination":[{"next":{"ExitOk":[{"from":{"Static":"Pick player: (1 or 2)"}}]},"condition":"True"}]}},{"Node":{"id":"pick player","executor":{"ContextMut":[{"from":{"ParsedInput":{"path":"/","required":false}},"to":{"path":"player_turn","ty":"Number","merge":"Insert","optional":false}},{"from":{"Static":"running"},"to":{"path":"state","merge":"Insert","optional":false}},{"from":{"Static":1},"to":{"path":"next_turn","ty":"Number","merge":"Insert","optional":false}}]},"destination":[{"next":{"Node":"next move"},"condition":"True"}]}},{"Node":{"id":"next move","executor":{"ContextMut":[]},"destination":[{"next":{"Node":"request input"},"condition":{"Eq":{"from_1":{"Context":{"path":"player_turn","required":false}},"from_2":{"Context":{"path":"next_turn","required":false}}}}},{"next":{"Node":"ai move"},"condition":{"NotEq":{"from_1":{"Context":{"path":"player_turn"}},"from_2":{"Context":{"path":"next_turn"}}}}}]}},{"Node":{"id":"request input","executor":{"Agent":{"provider":{"OpenAI":{"api_key":"AWPAK_OPENAI_API_KEY","model":"gpt-4o"}},"system_prompt":"You are an agent that prints the current state of a Connect Four game board to the console.\nYou will receive a 6-row by 7-column 2D array representing the board. Each element in the array is a number:\n\n* `0` represents an empty cell,\n* `1` represents a piece from player 1,\n* `2` represents a piece from player 2.\n\nYour task is to output a visual representation of the board as plain text, following these rules:\n\n1. The first row in the array corresponds to the top of the board (printed first).\n2. Represent each cell as:\n\n   * `0` → `\" . \"`\n   * `1` → `\" X \"`\n   * `2` → `\" O \"`\n3. Separate each cell with a single space.\n4. Print one row per line.\n5. After all 6 rows, print a final line with column numbers `0` through `6` to indicate the column indices, like this:\n\n   ```\n    0   1   2   3   4   5   6\n   ```\n\nExample output:\n\n```\n .  .  .  .  .  .  . \n .  .  .  X  .  .  . \n .  .  O  X  .  .  . \n .  O  X  O  .  .  . \n X  X  O  X  .  .  . \n O  O  X  O  .  .  . \n 0  1  2  3  4  5  6\n```\n\nDo **not** include any extra explanation or labels. Your entire output should only be the formatted board.","save_history":false,"prompt":[{"from":{"Context":{"path":"table","required":false}}}],"servers":[]}},"output":{"path":"table_str","merge":"Insert","optional":false},"destination":[{"next":{"ExitOk":[{"from":{"Context":{"path":"table_str","required":false}},"prefix":"Your turn: (1 to 7)\n\n"}]},"condition":"True"}]}},{"Node":{"id":"update game","executor":{"Agent":{"provider":{"OpenAI":{"api_key":"AWPAK_OPENAI_API_KEY","model":"gpt-4o"}},"system_prompt":"You are an agent that updates the state of a Connect Four board after a move.\nYou will receive three inputs:\n\n* `Player`: either `1` or `2`, representing the player who is making the move.\n* `Column`: an integer from `0` to `6`, indicating the column where the player wants to drop their piece.\n* `Board`: a 6-row by 7-column 2D array representing the current game state. Each cell contains:\n\n  * `0` for an empty cell\n  * `1` for player 1’s piece\n  * `2` for player 2’s piece\n\nYour task is to return the updated board after placing the player’s piece in the specified column.\n\n---\n\n### Behavior:\n\n1. The board is indexed from **top to bottom**: `row 0` is the top, `row 5` is the bottom.\n\n2. The player’s piece must be placed in the **lowest available (empty) row** within the specified column, i.e., the first row (starting from index `5` and going upward) where the cell in that column is `0`.\n\n3. You must **not overwrite existing pieces** — only place the new piece in the first available `0` found from bottom to top in the given column.\n\n4. If the column is already full (i.e., there are no `0` values in that column), return exactly:\n\n   ```\n   ERROR\n   ```\n\n5. The output must be:\n\n   * The **updated 2D array**, if the move is valid.\n   * The string `\"ERROR\"`, if the move is invalid.\n\n6. Do not return anything else. Return only the output, no explanation, labels or \"```\".\n\n---\n\n### Example: Valid move\n\n**Input:**\n\n```\nPlayer: 1  \nColumn: 2  \n\nBoard:  \n[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,2,0,0,0],[0,0,0,1,0,0,0]]\n```\n\n**Output:**\n\n```\n[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,2,0,0,0],[0,0,1,1,0,0,0]]\n```\n\n---\n\n### Example: Invalid move (column full)\n\n**Input:**\n\n```\nPlayer: 2  \nColumn: 0  \n\nBoard:  \n[[1,0,0,0,0,0,0],[2,0,0,0,0,0,0],[1,0,0,0,0,0,0],[2,0,0,0,0,0,0],[1,0,0,0,0,0,0],[2,0,0,0,0,0,0]]\n```\n\n**Output:**\n\n```\nERROR\n```","save_history":false,"prompt":[{"from":{"Context":{"path":"next_turn","required":false}},"prefix":"Player: "},{"from":{"Context":{"path":"next_move"}},"prefix":"\nColumn: ","suffix":""},{"from":{"Context":{"path":"table","required":false}},"prefix":"\n\nBoard:\n"}],"servers":[]}},"output":{"path":"table","ty":"Array","merge":"Insert","optional":false},"destination":[{"next":{"Node":"evaluate game"},"condition":"True"}]}},{"Node":{"id":"evaluate game","executor":{"Agent":{"provider":{"OpenAI":{"api_key":"AWPAK_OPENAI_API_KEY","model":"gpt-4.1"}},"system_prompt":"You are an agent that evaluates the current state of a Connect Four game board.\nYou will receive a 6-row by 7-column 2D array (`Board`) representing the game state. Each cell contains:\n\n* `0` for an empty cell\n* `1` for a piece from player 1\n* `2` for a piece from player 2\n\nYour task is to analyze the board and return a single integer according to the following rules:\n\n### Output values:\n\n* `0` → The game is still in progress (no winner, and empty cells remain)\n* `1` → Player 1 has won (four of their pieces are connected in a row, column, or diagonal)\n* `2` → Player 2 has won\n* `3` → The game is a draw (the board is full and no player has won)\n\n### Rules:\n\n1. A player wins if they have four consecutive pieces (`1` or `2`) in:\n\n   * A horizontal row\n   * A vertical column\n   * A diagonal (either from top-left to bottom-right or top-right to bottom-left)\n2. If both players have four in a row at the same time (which is not possible in standard Connect Four), assume the first player who achieved it wins.\n3. You must **only output a single number from 0 to 3**, with **no explanation** or extra text.\n\n### Example:\n\n**Input:**\n\n```\nBoard:\n[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0], [0,0,0,1,0,0,0],[0,0,0,1,0,0,0],[0,0,0,1,0,0,0]]\n```\n\n**Output:**\n\n```\n0\n```","save_history":false,"prompt":[{"from":{"Context":{"path":"table","required":false}}}],"servers":[]}},"output":{"path":"game_result","ty":"Number","merge":"Insert","optional":false},"destination":[{"next":{"Node":"change turn"},"condition":{"Eq":{"from_1":{"Context":{"path":"game_result","required":false}},"from_2":{"Static":0}}}},{"next":{"Node":"end game"},"condition":"True"}]}},{"Node":{"id":"change turn","executor":{"ContextMut":[{"from":{"Context":{"path":"turns/{next_turn}","required":false}},"to":{"path":"next_turn","ty":"Number","merge":"Insert","optional":false}}]},"destination":[{"next":{"Node":"next move"},"condition":"True"}]}},{"Node":{"id":"end game","executor":{"ContextMut":[]},"destination":[{"next":{"ExitOk":[{"from":{"Context":{"path":"game_result","required":false}},"prefix":"Game finish. Result: "}]},"condition":"True"}]}},{"Node":{"id":"ai move","executor":{"Agent":{"provider":{"OpenAI":{"api_key":"AWPAK_OPENAI_API_KEY","model":"gpt-4.1"}},"system_prompt":"You are an agent that plays Connect Four.\nYou will receive two inputs:\n\n* `Player`: either `1` or `2`, representing your player number.\n* `Board`: a 6-row by 7-column 2D array representing the current game state. Each cell contains:\n\n  * `0` for an empty cell\n  * `1` for player 1's piece\n  * `2` for player 2's piece\n\nYour task is to **choose the best column** (from `0` to `6`) to drop your piece, and return **only** that column number as an integer.\n\n### Rules:\n\n1. You must choose a column that is **not full** (i.e., has at least one `0`).\n2. Your goal is to **play optimally**, prioritizing:\n\n   * Winning immediately if possible (play a move that gives you four in a row).\n   * Blocking the opponent from winning on their next move if they are threatening to win.\n   * Otherwise, choose the **most strategic move** to improve your chances of winning (e.g., center columns are usually stronger).\n3. If multiple columns are equally good, choose the one with the **lowest index**.\n\n### Output:\n\n* Return only the column index (`0` to `6`) where you want to drop your piece.\n* Do **not** return anything else (no explanation, no board, no labels).\n\n### Example Input:\n\n```\nPlayer: 1\n\nBoard:\n[[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,2,1]]\n```\n\n**Example Output:**\n\n```\n3\n```","save_history":false,"prompt":[{"from":{"Context":{"path":"turns/{player_turn}"}},"prefix":"Player: "},{"from":{"Context":{"path":"table"}},"prefix":"\n\nBoard:\n"}],"servers":[]}},"output":{"path":"next_move","ty":"Number","merge":"Insert","optional":false},"destination":[{"next":{"Node":"update game"},"condition":"True"}]}},{"Node":{"id":"player move","executor":{"ContextMut":[{"from":{"Operation":{"Substract":{"num_1":{"ParsedInput":{"path":"/"}},"num_2":{"Static":1}}}},"to":{"path":"next_move","ty":"Number","merge":"Insert","optional":false}}]},"destination":[{"next":{"Node":"update game"},"condition":"True"}]}}]}